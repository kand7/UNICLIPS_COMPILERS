START = S0

// Αρχική κατάσταση που στην συνέχεια διακλαδώνεται στις υπόλοιπες κατηγορίες λεκτικών μονάδων.
// ανάλογα με τον πρώτο χαρακτήρα που θα πληκτρολογηθεί
S0: \s \t -> B1
	; -> C1
	- + -> NUM1
	1-9 -> NUM2
	0 -> NUM3
	A-Z a-z -> NAME1
	" -> STR1
	? -> V1
	EOF -> GOOD
	\n -> GOOD
	* -> BAD

B1: \s \t -> B1
	\n EOF-> GOOD
	* -> BAD

C1: \n -> GOOD
	* -> C1

// Διακλάδωση για όλους τους αριθμούς (ακέραιους και κινητής υποδιαστολής) και παραπάνω διακλάδωση
// αναλόγως με τον αν θα είναι ακέραιος η όχι. Η υπόλοιπες κατηγορίες δεν απαιτούν κάποια ιδιαίτερη
// διαχείρηση και ακολοθούν την δομή των αντίστοιχων ενιαίων αυτομάτων.
NUM1: 	0 -> NUM6
		1-9 -> NUM2
		* -> BAD
	
NUM2:	\n -> GOOD
		E e -> NUM4
		0-9 -> NUM2
		. -> NUM5
		* -> BAD

NUM3: 	\n -> GOOD
		E e -> NUM4
		. -> NUM5
		* -> BAD

NUM4: 	0 -> NUM8
		- + -> NUM9
		1-9 -> NUM10
		* -> BAD

NUM5: 	0-9 -> NUM7
		* -> BAD

NUM6: 	. -> NUM5
		E e -> NUM4
		* -> BAD

NUM7:	0-9 -> NUM7
		\n -> GOOD
		E e -> NUM4
		* -> BAD

NUM8: 	\n -> GOOD
		* -> BAD

NUM9:	1-9 -> NUM10
		* -> BAD

NUM10: 	0-9 -> NUM10
		\n -> GOOD
		* -> BAD


NAME1:	A-Z a-z -> NAME1
		0-9 -> NAME1
		- -> NAME1
		_ ->NAME1
		* -> BAD
		\n -> GOOD

STR1:	\\ -> STR2
		" -> STR3
		* -> STR1
STR2: 	\\ -> STR1
		" -> STR1
		n -> STR1
		* -> BAD
STR3: 	\n -> GOOD
		* -> BAD

V1: a-z A-Z 0-9 -> V2
	* -> BAD
V2: a-z A-Z 0-9 -> V2
	\n -> GOOD
	* -> BAD

GOOD(OK):
